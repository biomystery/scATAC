#!/usr/bin/env bds
/*************************************************************
help 
*************************************************************/
help == scATAC pipeline settings
       
threads := 8                   help Set threads for Bowtie2 mapping, sorting and duplication removal [1].
string r1                      help fastq.gz file that contains forward reads (only .gz allowed).
string r2                      help fastq.gz file that contains reverse reads (only .gz allowed).
string barcode_dir             help folder that contains r7_ATAC, i7_ATAC, i5_ATAC and r5_ATAC barcode.
max_barcode_mismatch := 2      help max barcode mismatch allowed for barcode error correction [2].
string mark_duplicate          help path to picard MarkDuplicates.jar [MarkDuplicates.jar].
string prefix                  help prefix of output files.
string bowtie2_idx             help Bowtie2 indexed reference genome.
min_read := 500                help cells with reads less than 'min_read' will be filtered [500].


/*************************************************************
global variables  
*************************************************************/
string tbam, cbam , bam_nsort, bam_nsort_dedup,bam_nsort_dedup_stat
string bam_nsort_dedup_filtered, bam_gsort_dedup_filtered, bam_final
string log_file
       
/*************************************************************
main 
*************************************************************/
include "./chk_cell.bds"
       
main()

void main(){
      init()
      run_align()
      correct_barcode()
      split_cell()
      if(chk_cell())       dedup_cell()
      merge_cell()
      gen_barcode_freq()
      filter_cell_gsort()
      summarize_clean()
}


/*************************************************************
sub-steps  
*************************************************************/
void init () {

    tbam = "$prefix\_tmp/$prefix.umap.bam"
    cbam = "$prefix\_tmp/$prefix.umap.corrected.bam"
    bam_nsort = "$prefix\_tmp/$prefix.umap.corrected.nsorted.bam"
    bam_nsort_dedup = "$prefix\_tmp/$prefix.umap.corrected.nsorted.nodup.bam"
    bam_nsort_dedup_stat = "$prefix\_tmp/$prefix.umap.corrected.nsorted.nodup.stat"
    bam_nsort_dedup_filtered="$prefix\_tmp/$prefix.umap.corrected.nsorted.nodup.filtered.bam"
    bam_gsort_dedup_filtered="$prefix\_tmp/$prefix.umap.corrected.nsorted.nodup.filtered.gsorted.bam"
    bam_final="$prefix.bam"


    # logging
        
    log_file="$prefix.log"
    sys echo "================================ Parameters ==================================" 2>&1 | tee $log_file
    sys echo "START: (`date`)"        | tee -a $log_file
    sys echo THREADS=$threads 2>&1 | tee -a $log_file
    sys echo R1=$r1 2>&1 | tee -a $log_file
    sys echo R2=$r2 2>&1 | tee -a $log_file
    sys echo BARCODE_DIR=$barcode_dir 2>&1 | tee -a $log_file
    sys echo MAX_BARCODE_MISMATCH=$max_barcode_mismatch 2>&1 | tee -a $log_file
    sys echo MARK_DUPLICATE=$mark_duplicate 2>&1 | tee -a $log_file
    sys echo PREFIX=$prefix 2>&1 | tee -a $log_file
    sys echo GENOME=$bowtie2_idx 2>&1 | tee -a $log_file
    sys echo MIN_READ=$min_read 2>&1 | tee -a $log_file
}       

# step  1. map using bowtie2 followed by filtering reads with MAPQ < 30 and inproperly mapped pairs;
void run_align (){

    log := "$prefix.algn.log"
    in := [ r1, r2 ]; out := [ tbam ] 
    cpus := threads; taskName := "Align & Filter"

    tid := task ( out <- in ) {
        sys bowtie2 -p $threads -t -X2000 --no-mixed --no-discordant --mm \
        -x $bowtie2_idx -1 $r1 -2 $r2 2>$log  | samtools view -F 1804 -q 30 -bS - > $tbam 
    }

    wait 
}

#  Step 2. correct barcode error by allowing $max_barcode_mismatch mismatches;
void correct_barcode(){

    in := [tbam] ; out := [cbam]; taskName := "Correct barcode"
    tid := task ( out <- in ) {
        sys samtools view -h $tbam                               \
        | scATAC_barcode_err_correct $max_barcode_mismatch $barcode_dir \
        | samtools view -bS - > $cbam 
    }

    wait
}

# Step 3. split reads to individual cells based on the barcode combination

void split_cell(){
    in := [cbam]; out := [bam_nsort] ; taskName := "split cells"
    cpus:=threads
    tid := task (out <- in) {
        sys samtools sort -n -@ $threads -m 1G $cbam -o $bam_nsort
        sys mkdir -p  $prefix\_tmp/cells # create a tmp folder
        sys samtools view -h $bam_nsort \
        | scATAC_decell $min_read $prefix\_tmp/cells -
    }
    wait 
}    




#  Step 4. remove PCR duplication for each cell;

void dedup_cell(){
    tmp := sys ls $prefix\_tmp/cells|grep .sam | sed "s/\.sam//g" ;
    barcodes := tmp.split('\n')
    if(barcodes.size()>0)    barcodes.pop();
    print ("total cell number is " + barcodes.size()+"\n" )
        
    for (int i=0;i< barcodes.size();i++){
        barcode := barcodes[i]
        task {
            sys echo "processing $i cell \n"
            sys samtools view -bS $prefix\_tmp/cells/$barcode.sam       \
            | samtools sort  - -o $prefix\_tmp/cells/$barcode.sorted.bam
            sys samtools rmdup $prefix\_tmp/cells/$barcode.sorted.bam $prefix\_tmp/cells/$barcode.sorted.nodup.bam
        }
   }
   wait
  sys rm $prefix\_tmp/cells/*.sam
}



# Step 5. merge reads from different cells to a single file
void merge_cell() {
        taskName := "Merge_cell"
    tid:= task(!bam_nsort_dedup.exists()){
        sys samtools cat -o $bam_nsort $prefix\_tmp/cells/*.sorted.bam
        sys samtools cat -o $bam_nsort_dedup  $prefix\_tmp/cells/*.sorted.nodup.bam
    }
    wait 
}

#rm -r $prefix\_tmp/cells/

# Step 6. generate barcode frequency
void gen_barcode_freq(){
    taskName := "gen_barcode_freq";
    in := [bam_nsort_dedup]; out := [bam_nsort_dedup_stat]
    tid:= task (out <- in) {
        sys samtools view $bam_nsort_dedup \
          | awk '{split($1,a,":"); print a[1]}' | sort | uniq -c | awk '{print $2, $1}' \
          | sort -k2rn - > $bam_nsort_dedup_stat
    }
    wait 
}

# Step 7. filter cells with low reads less than $MIN_READ reads

void filter_cell_gsort(){
     taskName := "filter_cell_gsort";  cpus:= threads
     in := [bam_nsort_dedup, bam_nsort_dedup_stat]
     out := [bam_gsort_dedup_filtered]
     tid := task( out <- in , !bam_final.exists()){
          sys samtools view -h $bam_nsort_dedup \
          | scATAC_rm_cell_with_low_cov $min_read $bam_nsort_dedup_stat - \
          | samtools view -bS - > $bam_nsort_dedup_filtered
          sys samtools sort -@ $threads -m 1G $bam_nsort_dedup_filtered  -o $bam_gsort_dedup_filtered 
     }
     wait 
}

# Step 9. Summarize & clean_up 
void summarize_clean(){
     taskName := "Summarize_clean"; 
     in := [bam_nsort_dedup, bam_nsort_dedup_stat]
     out := [bam_final]
     tid := task(out <- in ){
         sys scATAC_qc.sh -r $r1 -l $log_file -t $tbam -c $cbam -n $bam_nsort -d $bam_nsort_dedup -s $bam_nsort_dedup_stat \
          -g $bam_gsort_dedup_filtered -m $min_read 
         sys mv $bam_gsort_dedup_filtered $bam_final
     }
     wait 
}

#rm -r $PREFIX\_tmp

